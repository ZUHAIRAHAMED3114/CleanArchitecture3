@page "/placeorder"
@inject IViewShoppingCartUseCase viewShoppingCartuseCase
@inject IPlaceOrderUseCase placeOrderUseCase
@inject NavigationManager navigationManager
<h3>Placing Order</h3>
<br/>

@if (order !=null) { 
<div class="row">
    <div class="col">
        <CustomerFormComponent OnCustomerInfoSubmitted="HandleCustomerInfoSubmitted">
        </CustomerFormComponent>
    </div>
    <div class="col">
        <OrderSummaryComponent Order="order" HidePlaceholder="true"></OrderSummaryComponent>
    </div>

</div>
}

@code {
    private Order order;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) {
            order = await viewShoppingCartuseCase.Execute();
            StateHasChanged();
        }
    }

    async void HandleCustomerInfoSubmitted(CustomerViewModel viewModel) {
        var config = new AutoMapper.MapperConfiguration(cfg =>
        {
            cfg.CreateMap<CustomerViewModel, Order>();
        });
        var mapper = new AutoMapper.Mapper(config);

        mapper.Map<CustomerViewModel, Order>(viewModel, order);
        var orderUniqueId = await placeOrderUseCase.Execute(order);
        if (string.IsNullOrEmpty(orderUniqueId))
        {
            // To Do Display Error Message
        }
        else {
            navigationManager.NavigateTo($"/orderconfirm/{orderUniqueId}");
        }
    }
}
